Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statements
Rule 1     statements -> statement
Rule 2     statements -> statements statement
Rule 3     statement -> PRINTLN COLON STRING
Rule 4     statement -> LET SYMBOL EQUALS STRING

Terminals, with rules where they appear

COLON                : 3
EQUALS               : 4
LET                  : 4
PRINTLN              : 3
STRING               : 3 4
SYMBOL               : 4
error                : 

Nonterminals, with rules where they appear

statement            : 1 2
statements           : 2 0

Parsing method: LALR

state 0

    (0) S' -> . statements
    (1) statements -> . statement
    (2) statements -> . statements statement
    (3) statement -> . PRINTLN COLON STRING
    (4) statement -> . LET SYMBOL EQUALS STRING

    PRINTLN         shift and go to state 3
    LET             shift and go to state 4

    statements                     shift and go to state 1
    statement                      shift and go to state 2

state 1

    (0) S' -> statements .
    (2) statements -> statements . statement
    (3) statement -> . PRINTLN COLON STRING
    (4) statement -> . LET SYMBOL EQUALS STRING

    PRINTLN         shift and go to state 3
    LET             shift and go to state 4

    statement                      shift and go to state 5

state 2

    (1) statements -> statement .

    PRINTLN         reduce using rule 1 (statements -> statement .)
    LET             reduce using rule 1 (statements -> statement .)
    $end            reduce using rule 1 (statements -> statement .)


state 3

    (3) statement -> PRINTLN . COLON STRING

    COLON           shift and go to state 6


state 4

    (4) statement -> LET . SYMBOL EQUALS STRING

    SYMBOL          shift and go to state 7


state 5

    (2) statements -> statements statement .

    PRINTLN         reduce using rule 2 (statements -> statements statement .)
    LET             reduce using rule 2 (statements -> statements statement .)
    $end            reduce using rule 2 (statements -> statements statement .)


state 6

    (3) statement -> PRINTLN COLON . STRING

    STRING          shift and go to state 8


state 7

    (4) statement -> LET SYMBOL . EQUALS STRING

    EQUALS          shift and go to state 9


state 8

    (3) statement -> PRINTLN COLON STRING .

    PRINTLN         reduce using rule 3 (statement -> PRINTLN COLON STRING .)
    LET             reduce using rule 3 (statement -> PRINTLN COLON STRING .)
    $end            reduce using rule 3 (statement -> PRINTLN COLON STRING .)


state 9

    (4) statement -> LET SYMBOL EQUALS . STRING

    STRING          shift and go to state 10


state 10

    (4) statement -> LET SYMBOL EQUALS STRING .

    PRINTLN         reduce using rule 4 (statement -> LET SYMBOL EQUALS STRING .)
    LET             reduce using rule 4 (statement -> LET SYMBOL EQUALS STRING .)
    $end            reduce using rule 4 (statement -> LET SYMBOL EQUALS STRING .)

